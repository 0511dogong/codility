You are given N counters, initially set to 0, and you have two possible operations on them:

increase(X) − counter X is increased by 1,
max counter − all counters are set to the maximum value of any counter.
A non-empty array A of M integers is given. This array represents consecutive operations:

if A[K] = X, such that 1 ≤ X ≤ N, then operation K is increase(X),
if A[K] = N + 1 then operation K is max counter.
For example, given integer N = 5 and array A such that:

    A[0] = 3
    A[1] = 4
    A[2] = 4
    A[3] = 6
    A[4] = 1
    A[5] = 4
    A[6] = 4
the values of the counters after each consecutive operation will be:

    (0, 0, 1, 0, 0)
    (0, 0, 1, 1, 0)
    (0, 0, 1, 2, 0)
    (2, 2, 2, 2, 2)
    (3, 2, 2, 2, 2)
    (3, 2, 2, 3, 2)
    (3, 2, 2, 4, 2)
The goal is to calculate the value of every counter after all operations.

Write a function:

def solution(N, A)

that, given an integer N and a non-empty array A consisting of M integers, returns a sequence of integers representing the values of the counters.

Result array should be returned as an array of integers.

For example, given:

    A[0] = 3
    A[1] = 4
    A[2] = 4
    A[3] = 6
    A[4] = 1
    A[5] = 4
    A[6] = 4
the function should return [3, 2, 2, 4, 2], as explained above.

Write an efficient algorithm for the following assumptions:

N and M are integers within the range [1..100,000];
each element of array A is an integer within the range [1..N + 1].

try 1.

from itertools import repeat
from collections import Counter
import heapq

# Total score: 0%
def solution(N, A):
	start = 0
	result_list = list(repeat(0, N))
	N_index_list = list(i for i, x in enumerate(A) if x == N+1)
	for index, A_index in enumerate(N_index_list, 1):
		heap = []
		for idx, val in Counter(A[start:A_index]).items():
			heapq.heappush(heap, (-idx, val))
		result_list = list(repeat(heapq.heappop(heap)[1], N))
		start = A_index+1

		if index == len(N_index_list):
			for a in A[A_index+1:]:
				result_list[a-1] = result_list[a-1]+1
	return result_list
	
-------------------------------------------------------------------

try 2.

from itertools import repeat 

# Total score: 66%
def solution(N, A):
	if not N:
		raise Exception("N is empty")
	if not A:
		return list()
	result_list = list(repeat(0, N))
	def increase(index):
		nonlocal result_list
		try:
			result_list[index] += 1
		except ValueError:
			raise Exception("not exitst key")
	def max_counter():
		nonlocal result_list
		result_list = list(repeat(max(result_list), N))
	for val in iter(A):
		max_counter() if val == N+1 else increase(val-1)
	return result_list

-------------------------------------------------------------------
# try 3.

from itertools import repeat
from collections import Counter

# score: 0%
def solution(N, A):
	max_counter = 1
	R = list(repeat(1, N))
	S = "".join(map(str, A))
	L = S.split(str(N+1))

	for i in range(len(L)):
		if i == (len(L)-1):
			R = list(repeat(max_counter, N))
			for val in iter(L[i]):
				R[int(val)-1] += 1
		else:
			max_counter = int(Counter(L[i]).most_common(1)[0][1])
	return R
	
	
	from collections import deque

-------------------------------------------------------------------

# try 4.

from collections import deque

# scroe: 66%
def solution(N, A):
	D = {n: 0 for n in range(1, N+1)}
	max_counter = 1

	D_Q = deque(A)
	while D_Q:
		V = D_Q.popleft()
		if V != N+1:
			D[V] += 1
		else:
			max_counter = max(D.values())
			D = {n: max_counter for n in range(1, N+1)}
	return list(D.values())
